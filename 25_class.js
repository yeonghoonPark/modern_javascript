/**
 * 25-1. 클래스는 프토입의 문법적 설탕인가?
 *
 * 자바스크립트는 프로토타입 기반 객체지향 언어다.
 * 프로토타입 기반 객체지향 언어는 클래스가 필요 없는 객체지향 프로그래밍 언어다.
 * ES6에 `class` 키워드가 도입되기 전에는 생성자 함수와 프로토타입을 통해 객체 지향 언어의 상속을 구현하였다.
 * `class`는 사실 함수이며, 기존 프로토타입 기반 패턴을 클래스 기반 패턴처럼 사용할 수 있또록 하는 문법적 설탕(syntax sugar)로 볼 수도 있다.
 * 단, `class`와 생성자 함수는 모두 프로토타입 기반의 인스턴스를 생성하지만 정확하게 동일하게 동작하지는 않는다.
 * `class`는 생성자 함수보다 엄격하며 생성자 함수에서는 제공하지 않는 기능도 제공한다.
 *
 * `class`는 생성자 함수와 매우 유사하게 동작하지만 다음과 같은 차이가 있다.
 * 1. `new` 키워드 없이 호출하면 에러가 발생한다. (생성자 함수는 `new` 키워드가 없으면 일반 함수로 호출된다)
 * 2. 상속을 지원하는 `extend`와 `super` 키워드를 제공한다.
 * 3. 호이스팅이 발생하지 않는 것처럼 동작한다. (`function` 키워드로 선언된 생성자 함수는 호이스팅이 발생한다)
 * 4. 내부의 모든 코드에는 암묵적으로 `use strict`가 지정되어 실행되며 해제할 수 없다.
 * 5. `constructor`, `prototype.메서드`, 정적 메서드는 모두 프로퍼티 어트리뷰트 [[Enumerable]]의 값이 `false`이다. (열거되지 않는다)
 *
 * `class`는 생성자 함수보다 강력한 프로토타입 기반의 문법적 설탕이라고 볼 수도 있지만, 새로운 객체 생성 메커니즘으로 보는게 더 합당하다.
 *
 */
