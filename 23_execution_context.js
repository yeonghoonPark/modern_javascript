/**
 * 23-1. 소스코드의 타입
 *
 * 실행 컨텍스트(execution context)는 자바스크립트의 동작 원리를 담고 있는 핵심 개념이다.
 * 실행 컨텍스트를 바르게 이해하면 스코프, 식별자, 호이스팅, 클로저, 태스크 큐, 이벤트 핸들러 등의 동작을 이해할 수 있다.
 * ECMAScript 사양은 소스코드를 4가지 타입으로 구분한다.
 * 아래의 4가지 타입의 소스코드는 실행 컨텍스트를 생성한다.
 *
 * 1. 전역 코드 (global code)
 * - 전역에 존재하는 소스 코드를 말한다. 전역에 정의된 함수, 클래스 등의 내부 코드는 포함되지 않는다.
 *
 * 2. 함수 코드 (function code)
 * - 함수 내부에 존재하는 코드를 말한다. 함수 내부에 중첩 함수, 클래스 등의 내부 코드는 포함되지 않는다.
 *
 * 3. eval 코드 (eval code)
 * - 전역 객체의 메서드인 `eval` 메서드에 인자로 전달되어 실행되는 코드를 말한다.
 *
 * 4. 모듈 코드 (module code)
 * - 모듈 내부에 존재하는 소스 코드를 말한다. 모듈 내부의 함수, 클래스 등의 내부 코드는 포함되지 않는다.
 *
 * 위의 4가지 타입의 소스 코드로 구분하는 이유는 타입에 따라 실행 컨텍트스를 생성하는 과정과 관리 내용이 다르기 때문이다.
 *
 * 즉,
 * 🔑 실행 컨텍스트는 식별자의 유효 범위를 설정하는 스코프 체인을 생성하고 관리하는 역할을 하며,
 * 소스코드의 타입에 따라 실행 컨텍스트를 생성하고 관리하는 방식이 다르다는 점을 유의해야 한다.
 *
 */

// 1️⃣ 전역 코드 (global code) / 전역 실행 컨텍스트 (global execution context)
// 전역 코드는 전역 변수를 관리하기 위해 최상위 스코프인 전역 스코프를 생성한다.
// `var` 키워드로 선언된 전역 변수와 `function` 키워드로 정의된 전역 함수들을 전역 객체의 프로퍼티와 메서드로 참조(바인딩)하기 위해 전역 객체와 연결되어야 한다.
// 이를 위해 전역 코드가 평가되면 전역 실행 컨텍스트가 생성된다.
// 📚 전역 실행 컨텍스트는 브라우저에서 페이지가 로드될 때 자동으로 생성된다.

// 2️⃣ 함수 코드 (function code) / 함수 실행 컨텍스트 (function execution context)
// 함수 코드는 지역 변수, 매개변수, argument 객체를 관리하기 위해 지역 스코프를 생성한다.
// 생성한 지역 스코프는 전역 스코프와 스코프 체인의 일원으로 연결해야 한다.
// 이를 위해 함수 코드가 평가되면 함수 실행 컨텍스트가 생성된다.
// 📚 함수 실행 컨텍스트는 함수로 평가되거나 함수가 호출될 때마다 새로 생성된다.
// 🔑 함수 실행 컨텍스트는 키워드에 따라 다르게 동작한다.
// `function`: 함수 선언이 호이스팅되어 전역 컨텍스트가 생성될 때 이미 함수로 평가되므로, 함수 실행 컨텍스트가 즉시 생성된다.
// `var`: 호이스팅은 발생하지만 변수 선언만 호이스팅되어 함수 표현식이 실제로 할당될 때 함수 실행 컨텍스트가 생성된다.
// `let` / `const`: 호이스팅은 발생하지만 TDZ(Temporal Dead Zone)로 인해 선언 전에 참조할 수 없으며, 정의된 후에 호출 시 함수 실행 컨텍스트가 생성된다.

// 3️⃣ eval 코드 (eval code) / eval 실행 컨텍스트 (eval execution context)
// `eval` 코드는 스트릭트 모드에서는 자신만의 독자적인 스코프를 생성하고, 논-스트릭트 모드라면 외부 스코프(전역 또는 함수)를 공유한다.
// 이를 위해 eval 코드가 평가되면 eval 실행 컨텍스트가 생성된다.
// 📚 eval 실행 컨텍스트는 `eval` 함수가 호출될 때 생성된다.
// ❌ 보안, 성능의 문제로 사용하지 않아야 한다.

// 4️⃣ 모듈 코드 (module code) / 모듈 실행 컨텍스트 (module execution context)
// 모듈 코드는 모듈별로 독립적인 모듈 스코프를 생성한다.
// 이를 위해 모듈 코드가 평가되면 모듈 실행 컨텍스트가 생성된다.
// 📚 모듈 실행 컨텍스트는 `export` 키워드가 사용된 변수, 함수, 클래스 등의 모듈이 `import` 키워드를 통해 모듈을 로드할 때 생성된다.

/**
 * 23-2. 소스코드의 평가와 실행
 *
 * 자바스크립트 엔진은 런타임 이전에 소스코드를 평가하고, 런타임에 소스코드를 실행한다.
 * 소스코드를 2개의 과정, 즉 `소스코드 평가` → `소스코드 실행` 과정으로 나누어 처리한다.
 *
 * 소스코드를 평가하는 과정에서는
 * 소스코드에 따라 실행 컨텍스트를 생성하고 변수, 함수 등의 선언문만 먼저 실행하여 생성된 변수나 함수 식별자를 프로퍼티 키로 실행 컨텍스트가 관리하는 스코프에 등록한다.
 *
 * 소스코드를 실행하는 과정에서는
 * 소스코드를 실행하는데 필요한 정보, 즉 변수나 함수의 참조를 실행 컨텍스트가 관리하는 스코프에서 검색해서 참조한다.
 * 이때 변수 값의 변경 등 소스코드의 실행 결과는 다시 실행 컨텍스트가 관리하는 스코프에 등록된다.
 *
 */

// 👉 소스코드 예문
// 아래의 소스코드는 `소스코드 평가`와 `소스코드 실행`으로 분리할 수 있다.

// 소스코드 평가(런타임 이전): `var` 키워드를 이용하여 선언된 식별자 `x`는 실행 컨텍스트를 통해 스코프에 등록되고 초기화 과정을 거쳐 `undefined`를 참조하게 된다.
var x; // undefined

// 소스 코드 실행(런타임): 식별자 `x`가 선언된 변수인지 확인 후, 식별자 `x`는 10이라는 값을 참조한다. (만약 선언되지 않았다면 암묵적 전역이 발생한다)
x = 10;
